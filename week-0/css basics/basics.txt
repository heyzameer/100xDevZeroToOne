CSS (Cascading Style Sheets) is the language used to style HTML content, providing control over layout, color, fonts, and other visual properties. Here are the basics of CSS to get started:

---

### 1. **CSS Syntax**

   ```css
   selector {
       property: value;
   }
   ```
   - **Selector**: Specifies which HTML element(s) to style.
   - **Property**: The style property to be applied, like `color`, `font-size`, etc.
   - **Value**: The specific setting for the property, like `red`, `16px`, etc.

### 2. **Ways to Add CSS**

   - **Inline CSS**: Style added directly to an HTML element using the `style` attribute.
     ```html
     <p style="color: blue;">Hello</p>
     ```

   - **Internal CSS**: CSS within the `<style>` tag in the HTML `<head>`.
     ```html
     <style>
         p { color: blue; }
     </style>
     ```

   - **External CSS**: Separate CSS file linked to the HTML document.
     ```html
     <link rel="stylesheet" href="styles.css">
     ```

### 3. **CSS Selectors**

   - **Basic Selectors**:
     - `*`: Universal selector, selects all elements.
     - `element`: Selects all instances of a specific element (e.g., `p`, `h1`).
     - `.class`: Selects all elements with a specific class (e.g., `.button`).
     - `#id`: Selects the element with a specific ID (e.g., `#main-header`).

   - **Combinators**:
     - `element, element`: Group selector, selects multiple types (e.g., `h1, h2`).
     - `element1 element2`: Descendant selector, selects `element2` within `element1`.
     - `element1 > element2`: Child selector, selects direct children of `element1`.
     - `element1 + element2`: Adjacent sibling, selects `element2` immediately after `element1`.
     - `element1 ~ element2`: General sibling, selects all siblings after `element1`.

   - **Pseudo-Classes**:
     - `:hover`: Styles an element on hover.
     - `:first-child`: Selects the first child of a parent.
     - `:nth-child(n)`: Selects the nth child.

   - **Pseudo-Elements**:
     - `::before`: Adds content before the element’s content.
     - `::after`: Adds content after the element’s content.

### 4. **CSS Properties**

#### **Text Properties**
   - `color`: Text color.
   - `font-size`: Size of the text (e.g., `16px`, `1.5em`).
   - `font-family`: Font type (e.g., `Arial`, `sans-serif`).
   - `font-weight`: Thickness of the text (e.g., `bold`, `normal`).
   - `text-align`: Horizontal alignment (`left`, `right`, `center`).
   - `text-decoration`: Text decoration (`none`, `underline`).
   - `line-height`: Space between lines of text.
   - `text-transform`: Changes case (`uppercase`, `lowercase`).

#### **Background Properties**
   - `background-color`: Background color of an element.
   - `background-image`: Background image (e.g., `url("image.jpg")`).
   - `background-repeat`: Repeat options (`repeat`, `no-repeat`).
   - `background-size`: Size of the background image (`cover`, `contain`, or set in pixels).
   - `background-position`: Positioning of the background image (e.g., `center`).

#### **Box Model Properties**
   - **Content**: The content area, where text and images go.
   - **Padding**: Space inside the element, between the content and the border.
     ```css
     padding: 10px; /* adds space on all sides */
     ```
   - **Border**: The outline around the element.
     ```css
     border: 2px solid black;
     ```
   - **Margin**: Space outside the border, separating the element from others.
     ```css
     margin: 20px;
     ```

#### **Dimension Properties**
   - `width`: Width of the element (e.g., `50%`, `200px`).
   - `height`: Height of the element.
   - `max-width`/`min-width`: Sets maximum and minimum width.
   - `max-height`/`min-height`: Sets maximum and minimum height.

#### **Positioning Properties**
   - `position`: Controls positioning (`static`, `relative`, `absolute`, `fixed`, `sticky`).
   - `top`, `right`, `bottom`, `left`: Offsets when `position` is not `static`.
   - `z-index`: Controls stacking order for overlapping elements.

#### **Display and Visibility Properties**
   - `display`: Defines display behavior (`block`, `inline`, `inline-block`, `flex`, `grid`, `none`).
   - `visibility`: Controls element visibility (`visible`, `hidden`).

#### **Flexbox Properties**
   - `display: flex`: Turns an element into a flex container.
   - `flex-direction`: Row or column layout (`row`, `column`).
   - `justify-content`: Alignment along the main axis (`flex-start`, `center`).
   - `align-items`: Alignment along the cross axis (`flex-start`, `center`).
   - `flex-wrap`: Allows items to wrap onto multiple lines.

#### **Grid Properties**
   - `display: grid`: Turns an element into a grid container.
   - `grid-template-columns`: Defines column sizes.
   - `grid-template-rows`: Defines row sizes.
   - `grid-gap`: Space between grid items.
   - `justify-items`, `align-items`: Alignment of items within their grid areas.

---

### 5. **CSS Units**

   - **Absolute Units**: `px` (pixels), `cm`, `mm`, `in` (not flexible).
   - **Relative Units**: `%` (percentage), `em` (relative to parent’s font-size), `rem` (relative to root font-size), `vw`/`vh` (viewport width/height).

### 6. **CSS Colors**

   - **Named Colors**: `red`, `blue`, `green`, etc.
   - **Hexadecimal Colors**: `#RRGGBB` format, e.g., `#ff5733`.
   - **RGB/RGBA**: `rgb(255, 87, 51)`, `rgba(255, 87, 51, 0.5)`.
   - **HSL/HSLA**: `hsl(340, 100%, 50%)`, `hsla(340, 100%, 50%, 0.5)`.

